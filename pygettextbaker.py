#!/usr/bin/env python3
# -*- coding: utf-8 -*-

APPNAME = "pygettext-baker"
VERSION = "0.1"

import os
import sys
import argparse
from collections import namedtuple
import hashlib

import polib

TranlateDomain = namedtuple("TranlateDomain", [
    "domain", "default", "langs"])

def loaddomain(source):
    # read default.po
    defpo = polib.pofile(source)
    locpath = os.path.dirname(source)
    domainfile = os.path.basename(source)
    domain = domainfile
    if domain.lower()[-3:] == ".po":
        domain = domain[:-3]
    # scan all languages
    langs = {}
    for lang in os.listdir(locpath):
        langpath = os.path.join(locpath, lang)
        if not os.path.isdir(langpath):
            continue
        langfile = os.path.join(langpath, "LC_MESSAGES", domainfile)    
        if not os.path.exists(langfile):
            continue
        langs[lang] = polib.pofile(langfile)
    return TranlateDomain(domain, defpo, langs)

def create_pyfile(f, pofile, lang, domain, simple_gettext = False):
    def write(msg):
        f.write(msg + "\n")
    write("# -*- coding: utf-8 -*-")
    write("# Autogenerated by " + APPNAME + ", " + VERSION)
    write("# Domain: {}, locale: \"{}\"".format(domain, lang))
    write("")
    write("lang = {}".format(repr(lang)))
    write("translation_{} = {{".format(domain))
    for poentry in pofile.translated_entries():
        write("    {}: {},".format(repr(poentry.msgid), repr(poentry.msgstr)))
    write("}")
    write("")
    write("def _gettext_{}(msgid):".format(domain))
    write("    return translation_{}.get(msgid, None)".format(domain))
    write("")
    if simple_gettext:
        write("")
        write("def bindtextdomain(domain):")
        write("    pass")
        write("")
        write("")
    

def safelang(lang):
    return lang.replace("@", "_at_")

def baker(source, destination, simple):
    trdom = loaddomain(source)
    with open(os.path.join(destination, "__init__.py"), "w", 
        encoding = "UTF-8-sig") as f:
        create_pyfile(f, trdom.default, "", trdom.domain, 
            simple_gettext = simple)
    for lang, pofile in trdom.langs.items():
        with open(os.path.join(destination, "{}.py".format(safelang(lang))), 
            "w", encoding = "UTF-8-sig") as f:
            create_pyfile(f, pofile, lang, trdom.domain, False)

def main():
    print(APPNAME + ", " + VERSION)
    print("\tRoman Kharin (romiq.kh@gmail.com)")
    if len(sys.argv) < 2:
        print("Use -h for help.")
        return

    parser = argparse.ArgumentParser()
    parser.add_argument('source', help = "path to default .po file")
    parser.add_argument("destination", 
        help = "path to destination folder")
    parser.add_argument("--simple", 
        help = "generate simple gettext", action = "store_true")
    
    args = parser.parse_args()
    return baker(**vars(args))
    
if __name__ == "__main__":
    sys.exit(main())

